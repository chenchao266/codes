#include <iostream>
#include <fstream>
#include "transparam.hpp"
#include "permutation.hpp"
#include "enumtrans.hpp"
#include "bfenumtrans.hpp"
#include "enumtranstree.hpp"
#include "median.hpp"
#include "hmedian.hpp"
#include "transtest.hpp"
#include "ctimer.hpp"
using std::cout;
using std::ofstream;
using Utils::CTimer;
namespace Translocation{


void staticTest(bool tr,bool wrt,bool bf,double& enumtime,double& bftime,double& trtime)
{
    Common::chromNumber=2;
    Common::geneNumber=10;
    int chln[]={5,5};
	int perm1[]={ 1, -2, -3, 7, -9, -8, -4, -5, -6, 10};
		//{1,-2,3,8,-9,10,-11,12, 5,-6,7,4}

/*	{1,-2,3,8,-9,10,-11,12, 5,-6,7,4};//9;17;
    {1,-2,3,-4,5,7,6,11, 9,-10,8};//10;22;7946446??
    {1,-2,3,-7,-5,-6,-4,8, -11,-10,-9};//8;28;35256
    {1,2,4,3,5,6, 7,-8,12, 10,-11,9};//7;27;70580
    {1,-2,3,4,-5,6, 7,-8,12, 10,-11,9};//9;44;16544464
    {1,-2,3,4,-5,6,-9,10,, 8,7};//8;12;39386
    {1,-2,3,-6,7,8,, 5,4};//5;6;81
    {1,7,-6,, -5,-4,9,8,-2,-3,10};//6;9;336
    {1,-3,-2,4,-7,8,, 6,5 };//5;8;95
    {1,-2,3,-6,7,-11,10,-9,-8,12,, 5,4 };//7;1;264
    {1,-2,3,-4,5,, -10,-9,-8,7,-6};//7;32;11376
    {1,2,3,4,5,, -10,-8,-7,-9,-6};//4;32;112
    {1,-2,3,5,4,6, 7,-8,11,-10, -9,-14, -13,12,15};//12;71;?>3500301
    {1,-2,3,4,5,6,, 7,-8,11,-10,, -9,-14,, -13,12,15};//8;35;921280
    {1,14,-3,-7,-6, -5,10, -15,-9,-8,-13,-12,4,-2,-11 };//8;23;453954

	int perm2[]={1,2,3,4,5,,6,7,8,9,10,,11,12,13,14,15};
*/

    Permutation permut(perm1,chln);//,perm2

    testPermut(permut,tr,wrt,bf,enumtime,bftime,trtime);

}
void staticTest(bool tr,bool wrt,bool bf)
{
    double usetime,bfusetime,trusetime;
    staticTest(tr,wrt,bf,usetime,bfusetime,trusetime);

}
//===============================//

void staticTest2(bool tr,bool wrt,bool bf,double& enumtime,double& bftime,double& trtime)
{
    Common::chromNumber=10;
    Common::geneNumber=30;
    int chln[]={6,8,2,2,2,2,2,2,2,2};

    //1-123ª˘“Ú,124-163º”√±

    //Human
    //11,8,8,7,11,5,4,8,7,11,17,4,12,4,4,6,3,5,20,8
    int perm1[]=

    { 11,2,1,3,5,12,
     13,6,8,-7,4,10,-9,14,
     15,16,
     17,18,
     19,20,
     21,22,
     23,24,
     25,26,
     27,28,
     29,30
    };//6,8,2,2,2,2,2,2,2,2
/*  {-129,1,2,3,4,5,6,7,8,9,131,
    130,10,11,12,13,14,15,-124,
    -141,16,17,18,19,20,21,-128,
    148,22,23,24,25,26,163,
    162,27,28,29,30,31,32,33,34,35,-142,
    132,36,37,38,133,
    138,39,40,139,
    144,41,42,43,44,45,46,155,
    126,47,48,49,50,51,149,
    -143,52,53,54,55,56,57,58,59,60,-140,
    134,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,161,
    -125,76,77,-150,
    -147,78,79,80,81,82,83,84,85,86,87,145,
    152,88,89,153,
    136,90,91,137,
    154,92,93,94,95,127,
    160,96,151,
    146,97,98,99,135,
    -157,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,-156,
    158,118,119,120,121,122,123,159};
*/

    //Mouse
    //10,16,9,7,5,10,9,4,10,7,14,5,10,7,4,4,20,8,2,2
    int perm2[]=
    { 11,1,2,3,4,12,
     13,5,6,7,14,
     15,8,9,10,16,
     17,18,
     19,20,
     21,22,
     23,24,
     25,26,
     27,28,
     29,30
    };//6,5,5,2,2,2,2,2,2,2
/*  {124,12,13,14,15,-9,-8,-7,-6,125,
    126,47,48,-46,-45,-44,-11,-10,-58,-57,-56,92,93,-95,-94,127,
    128,-21,-20,-5,-4,-3,-2,-1,129,
    130,34,35,41,42,43,131,
    132,36,37,38,133,
    134,-64,-63,61,62,65,66,67,68,135,
    136,90,91,-55,-54,51,52,53,137,
    138,39,40,139,
    140,-60,-59,-77,-76,-19,-18,16,17,141,
    142,-97,-96,-75,-74,-73,143,
    144,24,25,78,79,-83,-82,-81,-80,84,85,86,87,145,
    146,-28,-27,-26,147,
    148,22,23,98,99,69,70,-72,-71,149,
    150,-33,-32,-31,-30,-29,151,
    152,88,89,153,
    154,-50,-49,155,
    156,-105,-104,106,107,108,114,115,-117,-116,-103,-102,109,110,111,112,113,-101,-100,157,
    158,118,119,120,121,122,123,159,
    160,161,
    162,163};
*/
    Permutation permut1(perm1,chln);

    renumber(perm1, perm2, Common::geneNumber);
    Permutation permut(perm1,chln);
    vector<TransParam> trprms;
    EnumTrans etrans;
    etrans.getOneTransSequence(permut,trprms);
    etrans.generateOneTransSequence(cout,permut1,trprms);

    testPermut(permut,tr,wrt,bf,enumtime,bftime,trtime);
}
void staticTest2(bool tr,bool wrt,bool bf)
{
    double usetime,bfusetime,trusetime;
    staticTest2(tr,wrt,bf,usetime,bfusetime,trusetime);
}
//===============================//
void staticMedianTest(bool wrt)
{
	Common::chromNumber=10;
	Common::geneNumber=100;
	int chln1[]={10,10,20,7,13,4,5,5,16,10};
	int perm1[]={1,2,-83,62,16,17,47,-53,-52,-51,       
		11,-63,-48,-78,-77,-76,-75,-74,-72,-71,       
		21,22,23,24,25,26,27,-18,-46,-45,-9,88,-38,-37,33,34,35,36,89,90,       
		-80,-79,54,55,56,-32,-31,       
		-10,-44,-87,13,14,73,15,-67,-66,-65,-64,12,30,       
		-50,-49,-58,-81,       
		-20,-19,68,69,70,       
		61,-82,-57,39,40,       
		41,42,43,-84,3,4,5,6,7,8,85,86,-29,-28,59,60,       
		91,92,93,94,95,96,97,98,99,100};
	int chln2[]={6,8,19,6,15,5,4,16,11,10};
	int perm2[]={1,2,3,4,-32,-31,       
		11,12,65,66,67,68,69,70,       
		21,53,54,55,56,-47,-8,-7,-6,-5,17,-73,74,75,76,77,78,79,80,       
		-20,-19,-13,33,28,-61,       
		51,52,22,15,16,-64,-35,-34,-27,58,14,23,24,25,-81,       
		-40,-39,-42,9,10,
		-60,88,89,90,       
		-30,-38,83,84,85,86,87,-59,-44,-43,-29,62,63,48,49,50,       
		71,72,26,-57,36,37,-82,18,45,46,-41,       
		91,92,93,94,95,96,97,98,99,100};
	int chln3[]={16,16,6,11,8,7,8,8,10,10};
	int perm3[]={1,-57,-56,-55,-54,-65,-64,-63,-15,-14,38,86,87,88,89,90,       
		61,62,16,17,34,35,36,33,-8,-7,75,76,77,84,85,-31,       
		21,37,-13,58,59,-41,       
		71,72,52,53,66,67,48,49,-2,-12,-11,       
		81,82,-4,-18,9,68,69,70,       
		-10, -47,-46,-45,-44,39,40,       
		-20,-19,-3,-74,-73,28,29,30,       
		-60,42,43,24,25,26,27,-51,       
		-50,32,22,23,-6,-5,83,78,79,80,       
		91,92,93,94,95,96,97,98,99,100};
	//int chln1[]={7,9,2,13,19};
	//int perm1[]={ 1,28,-38,6,15,16,-41, 
	//	-50,46,17,33,-34,-43,26,-32,-31, 
	//	21,40, 
	//	-30,-7,-2,-35,-19,-42,-8,-49,-29,-9,25,48,-11, 
	//	-10,-27,-13,-12,-36,-5,14,-24,-23,-18,-44,47,37,22,3,4,-45,39,20 };
	//int chln2[]={11,3,6,10,20};
	//int perm2[]={ 1,-28,34,-45,-9,37,-43,-48,-2,-35,40,
	//	-50,27,10,
	//	41,-5,46,29,39,20,
	//	11,-49,-25,8,18,19,38,44,26,30,
	//	21,22,3,4,-13,-12,36,33,47,42,23,24,-7,-6,-17,-16,-15,-14,-32,-31 };
	//int chln3[]={5,14,8,16,7};
	//int perm3[]={ 1,-47,23,13,-31,
	//	11,-26,25,-14,15,9,-27,38,-28,35,-4,-24,46,10,
	//	-20,-39,45,36,7,-3,-6,30,
	//	-50,5,-43,44,-29,-18,8,-34,-2,-12,-17,-22,49,32,16,-41,
	//	21,-37,33,42,-48,19,40 };
 
	//1?w?(1,33,-34,40)(-50,27,10)(21,-43,-48,-6,38,-28,35,2,7,-24,-23,-42,-8,18,19,-17,-46,49,-44,47,37,22,3,4,-5,-25,9,29,-13,-12,-36,-45,39,20)(-30,-14,15,16,-41)(31,32,-26,-11)
	//33,39,40 -> 56~60;12,21,27

	//int chln1[]= {6,4,2,3};
	//int perm1[]={ 1,-2,3,5,4,6, 7,-8,11,-10, -9,-14, -13,12,15 };
	//int chln2[]= {5,3,4,3};
	//int perm2[]={ 1,-2,3,12,6, 7,-8,-10, -9,4,5,-14, -13,11,15 }; 
	//int chln3[]= {6,4,3,2};
	//int perm3[]={ 1,-2,3,-8,11,6 ,7,4,5,-10 ,-9,12,-14 ,-13,15 }; 
	//6+6+6 -> 1+5+5 -> 4+2+4
	//median:(1,-2,3,-10)(7,-8,11,5,4,6)(-9,-14)(-13,12,15)
	//median:(1,-2,3,12,15)(7,-8,11,6)(-9,4,5,-14)(-13,-10)
	
    Permutation permut1(perm1,chln1);// 
    Permutation permut2(perm2,chln2);// 
	Permutation permut3(perm3,chln3);// 
	Median mdn(&permut1,&permut2,&permut3);

	ofstream fout;
	if(wrt){
		fout.open("mdn.txt");
	}
	CTimer mdntimer;
	mdntimer.start();

	mdn.computeMedianNM(fout, wrt);
	double usetime=mdntimer.getSecondes();

	if(wrt){
		fout.close();
	}
	ofstream ofs("median.txt",std::ios::app);
	ofs<<mdn;
	ofs<<usetime<<"s"<<"\n";
	ofs<<"==============================="<<"\n";
	ofs.close();
}

void staticHMedianTest(bool wrt)
{
	Common::chromNumber=10;
	Common::geneNumber=100;
	int chln1[]={2,9,12,19,22,7,6,4,9,10};
	int perm1[]={1,-31,      
		-10,-9,-8,-7,-6,-5,-4,-3,-21,      
		-20,-19,-18,-17,-16,-15,-14,-13,-64,-63,-62,-61,      
		41,42,43,44,45,46,35,36,-88,-87,76,-2,32,33,34,47,48,49,50,      
		11,12,65,66,67,68,-26,-25,-24,-23,-22,77,-85,-84,-83,-75,-74,-73,-86,78,79,80,      
		51,52,-89,37,38,39,40,      
		-30,-29,-28,-27,69,70,      
		71,72,-82,-81,      
		-90,53,54,55,56,57,58,59,60,      
		91,92,93,94,95,96,97,98,99,100};
	int chln2[]={20,8,8,10,11,6,7,10,10,10};
	int perm2[]={1,-37,-36,-35,-34,-46,-45,-53,-52,65,-9,-8,-67,-87,-86,-85,-84,-83,-82,-81,      
		-10,-27,-26,-25,-24,-23,-22,-21,      
		-20,-19,-18,-17,-66,28,29,30,      
		31,32,78,15,-4,-3,-2,38,39,40,      
		41,42,43,44,54,55,56,57,58,59,60,      
		-80,-79,-14,-13,-12,-11,      
		-50,-49,-48,-47,-63,-62,-61,      
		71,72,73,74,75,76,77,88,89,90,      
		51,-64,-33,-16,5,6,7,68,69,70,      
		91,92,93,94,95,96,97,98,99,100};
	int chln3[]={10,7,10,17,10,4,15,9,8,10};
	int perm3[]={1,-16,-15,63,64,85,77,3,9,10,      
		11,12,-48,-47,-46,-57,20,      
		71,56,82,83,84,65,66,67,-22,-21,      
		61,62,-14,5,72,-88,-87,17,18,-27,-26,-25,-24,-23,68,69,70,      
		81,-8,-7,-6,-55,-54,-53,-52,39,40,      
		51,28,89,90,      
		-30,-29,73,74,75,76,86,-45,-44,-43,-42,-33,58,59,60,      
		-50,-49,13,38,19,2,78,79,80,      
		41,34,35,36,37,-4,-32,-31,      
		91,92,93,94,95,96,97,98,99,100};
	
	
	//new leaf??
//int chln1[]={4,10,15,10,11,10,10,10,10,10};
//int perm1[]={1,-73,-72,-71,       
//			11,12,13,14,15,16,17,18,19,20,       
//			21,22,23,24,25,26,27,-4,-3,-2,6,7,8,9,10,       
//			31,32,33,34,35,36,37,38,39,40,       
//			-30,-29,-28,5,74,75,76,77,78,79,80,       
//			51,52,53,54,55,56,57,58,59,60,       
//			61,62,63,64,65,66,67,68,69,70,       
//			-50,-49,-48,-47,-46,-45,-44,-43,-42,-41,       
//			81,82,83,84,85,86,87,88,89,90,       
//			91,92,93,94,95,96,97,98,99,100};
//int chln2[]={10,6,9,9,4,14,2,10,26,10};
//int perm2[]={1,2,3,4,5,6,7,8,9,10,             
//			11,12,13,-53,-52,-51,             
//			21,22,23,24,25,37,38,39,40,             
//			31,-48,-47,-46,-45,-44,-43,-42,-41,             
//			-90,-89,49,50,             
//			-20,-19,-18,-17,-16,-15,-14,54,55,56,57,58,59,60,             
//			61,-81,             
//			71,72,73,74,75,76,77,78,79,80,             
//			-30,-29,82,83,84,85,86,87,88,32,33,34,35,36,26,27,28,62,63,64,65,66,67,68,69,70,             
//			91,92,93,94,95,96,97,98,99,100};
//int chln3[]={7,10,10,10,16,10,13,6,8,10};
//int perm3[]={1,2,3,4,68,69,70,             
//			11,12,13,14,15,16,17,18,19,20,             
//			21,22,23,24,25,26,27,28,29,30,             
//			31,32,77,78,-46,-45,-44,-43,-42,-71,             
//			-40,-39,-38,-37,76,33,34,35,36,-75,-74,-73,-84,-83,-82,-81,             
//			51,52,53,54,55,56,57,58,59,60,             
//			61,62,63,64,65,66,67,5,6,7,8,9,10,             
//			-80,-79,47,48,49,50,             
//			41,72,85,86,87,88,89,90,             
//			91,92,93,94,95,96,97,98,99,100};

	//int chln1[]={11,12,10,10,5,10,14,10,11,7};
	//int perm1[]={1,2,82,83,84,85,86,77,78,79,80,
	//	11,12,13,14,15,-69,5,6,7,8,9,10,
	//	21,22,23,24,25,26,27,28,29,30,
	//	31,32,33,34,35,36,37,38,39,40,
	//	-70,54,55,-63,-81,
	//	41,42,43,-67,-66,-65,-64,-3,-62,-61,
	//	-60,-59,-58,-57,-56,4,-68,44,45,46,47,48,49,50,
	//	71,72,73,74,75,76,87,88,89,90,
	//	-20,-19,-18,-98,-97,-96,-95,-94,-93,-92,-91,
	//	51,52,53,16,17,99,100};
	//int chln2[]={7,9,10,10,5,8,13,14,14,10};
	//int perm2[]={1,2,46,57,58,59,60,
	//	11,12,13,14,15,36,37,-72,-71,
	//	21,22,23,24,25,26,27,28,29,30,
	//	31,32,-5,-4,-76,-75,-74,-73,9,10,
	//	-50,-49,-48,89,90,
	//	51,52,56,47,-88,-87,19,20,
	//	61,62,63,64,65,66,-54,-53,-55,67,68,69,70,
	//	41,42,43,44,45,3,-8,-7,-6,-16,77,78,79,80,
	//	81,82,83,84,85,86,-34,-33,17,18,35,38,39,40,
	//	91,92,93,94,95,96,97,98,99,100};
	//int chln3[]={8,10,10,6,16,14,6,8,12,10};
	//int perm3[]={1,-63,82,83,84,85,69,70,
	//	11,12,13,14,15,16,17,18,19,20,
	//	21,22,23,24,25,26,-37,-36,-35,30,
	//	31,34,-44,-43,-42,-41,
	//	71,72,-65,-28,-8,-58,-45,46,66,67,68,86,87,88,89,90,
	//	81,-57,-56,53,54,55,2,3,4,5,6,7,59,60,
	//	-10,-9,-27,38,39,40,
	//	61,32,33,62,29,-64,-52,-51,
	//	-80,-79,-78,-77,-76,-75,-74,-49,-48,-47,73,50,
	//	91,92,93,94,95,96,97,98,99,100};

	//int chln1[]={10,10,20,7,13,4,5,5,16,10};
	//int perm1[]={1,2,-83,62,16,17,47,-53,-52,-51,       
	//	11,-63,-48,-78,-77,-76,-75,-74,-72,-71,       
	//	21,22,23,24,25,26,27,-18,-46,-45,-9,88,-38,-37,33,34,35,36,89,90,       
	//	-80,-79,54,55,56,-32,-31,       
	//	-10,-44,-87,13,14,73,15,-67,-66,-65,-64,12,30,       
	//	-50,-49,-58,-81,       
	//	-20,-19,68,69,70,       
	//	61,-82,-57,39,40,       
	//	41,42,43,-84,3,4,5,6,7,8,85,86,-29,-28,59,60,       
	//	91,92,93,94,95,96,97,98,99,100};
	//int chln2[]={6,8,19,6,15,5,4,16,11,10};
	//int perm2[]={1,2,3,4,-32,-31,       
	//	11,12,65,66,67,68,69,70,       
	//	21,53,54,55,56,-47,-8,-7,-6,-5,17,-73,74,75,76,77,78,79,80,       
	//	-20,-19,-13,33,28,-61,       
	//	51,52,22,15,16,-64,-35,-34,-27,58,14,23,24,25,-81,       
	//	-40,-39,-42,9,10,
	//	-60,88,89,90,       
	//	-30,-38,83,84,85,86,87,-59,-44,-43,-29,62,63,48,49,50,       
	//	71,72,26,-57,36,37,-82,18,45,46,-41,       
	//	91,92,93,94,95,96,97,98,99,100};
	//int chln3[]={16,16,6,11,8,7,8,8,10,10};
	//int perm3[]={1,-57,-56,-55,-54,-65,-64,-63,-15,-14,38,86,87,88,89,90,       
	//	61,62,16,17,34,35,36,33,-8,-7,75,76,77,84,85,-31,       
	//	21,37,-13,58,59,-41,       
	//	71,72,52,53,66,67,48,49,-2,-12,-11,       
	//	81,82,-4,-18,9,68,69,70,       
	//	-10, -47,-46,-45,-44,39,40,       
	//	-20,-19,-3,-74,-73,28,29,30,       
	//	-60,42,43,24,25,26,27,-51,       
	//	-50,32,22,23,-6,-5,83,78,79,80,       
	//	91,92,93,94,95,96,97,98,99,100};

//distance:25,27,34
//median:(1,2,3,4,5,6,7,8,9,10)(11,12,13,14,15,16,17,18,19,20)(21,22,23,24,25,26,27,28,29,30)(31,32,33,34,35,36,37,38,39,40)(41,42,43,44,45,46,47,48,49,50)(-80,-79,-78,-77,-76,-75,-74,-73,-72,-71)(-60,-59,-58,-57,-56,64,65,66,67,68,69,70)(61,62,82,83,84,85,86,87,88,89,90)(81,63,-55,-54,-53,-52,-51)(91,92,93,94,95,96,97,98,99,100)
//median score:44=8+17+19
//602.179s  --> 1.11013s

	Permutation permut1(perm1,chln1);// 
	Permutation permut2(perm2,chln2);// 
	Permutation permut3(perm3,chln3);// 
	HMedian hmdn(&permut1,&permut2,&permut3);

	ofstream fout;
	if(wrt){
		fout.open("hmdn.txt");
	}
	CTimer mdntimer;
	mdntimer.start();

	hmdn.computeMedian(fout, wrt);
	double usetime=mdntimer.getSecondes();

	if(wrt){
		fout.close();
	}
	ofstream ofs("hmedian.txt",std::ios::app);
	ofs<<hmdn;
	ofs<<usetime<<"s"<<"\n";
	ofs<<"==============================="<<"\n";
	ofs.close();

}
}//namespace

